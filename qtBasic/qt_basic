一、Q_OBJECT
只有继承了QObject类的类，才具有信号槽的能力。
Q_OBJECT这个宏将为会提供信号槽等机制，且该宏将会由moc进行特殊处理(moc会读取标记了Q_OBJECT的头文件)。

二、signals
——>{
class Newspaper : public QObject
{
    Q_OBJECT
public:
    Newspaper(const QString & name) :
        m_name(name)
    {
    }
    void send()
    {
        emit newPaper(m_name);
    }
signals:
    void newPaper(const QString &name);
private:
    QString m_name;
};
}<——
signals 块所列出的，就是该类的信号。
信号就是一个个的函数名，返回值是 void（因为无法获得信号的返回值，所以也就无需返回任何值）。

emit:关键字；
表示发出，也就是发出newPaper()信号

三、connet
——>{
//connect()的五个重载
QMetaObject::Connection connect(const QObject *, const char *,const QObject *, const char *,Qt::ConnectionType);

QMetaObject::Connection connect(const QObject *, const QMetaMethod &, const QObject *, const QMetaMethod &,Qt::ConnectionType);

QMetaObject::Connection connect(const QObject *, const char *, const char *,Qt::ConnectionType) const;

QMetaObject::Connection connect(const QObject *, PointerToMemberFunction,const QObject *, PointerToMemberFunction,Qt::ConnectionType)

QMetaObject::Connection connect(const QObject *, PointerToMemberFunction,Functor);
}<——

以下为槽函数的一般形式：
connect(sender, signal, receiver, slot);

1、第二、第四个参数需要使用SIGNAL和SLOT这两个宏转换成字符串。
注意SIGNAL和SLOT的宏参数并不是取函数指针，而是除去返回值的函数声明，并且 const 这种参数修饰符是忽略不计的。
2、信号槽要求信号和槽的参数一致(参数类型)。

四、
QMainWindow：由QT框架带来的一个预定义好的主窗口类；
QAction：动作，代表着窗口的各种功能；

五、moc
moc：(meta object compiler)对QT源码进行一次预处理，且发生在C++预处理工作之前，并且moc不是递归的。

六、布局管理器
QHBoxLayout：按照水平方向从左到右布局；
QVBoxLayout：按照竖直方向从上到下布局；
QGridLayout：在一个网格中进行布局，类似于 HTML 的 table；
QFormLayout：按照表格布局，每一行前面是一段文本，文本后面跟随一个组件（通常是输入框），类似 HTML 的 form；
QStackedLayout：层叠的布局，允许我们将几个组件按照 Z 轴方向堆叠，可以形成向导那种一页一页的效果。

七、智能指针
共享数据	QSharedDataPointer, QExplicitlySharedDataPointer：隐式或者显式地共享数据（不共享指针）。也被称为“侵入式指针”。
共享指针	QSharedPointer, QWeakPointer：线程安全的共享指针，类似 C++11 的std::shared_ptr，只不过具有良好的 Qt API。
范围指针	QScopedPointer, QScopedPointerArray：为了 RAII 目的：获取指针所有权，保证其能够在超出作用域的时候恰当地销毁。非共享的。
追踪 QObject对象	QPointer：追踪给定的 QObject 对象生命。

七、对话框
模态对话框：开启该对话框后，会阻塞同一应用程序的其他对话框的输入。
        1）应用程序级：开启对话框后，在本应用程序下，只能进行对该对话框的点击
        2）窗口级：开启对话框后，只阻塞对话框关联的窗口，适用于多窗口模式。
非模态对话框：开启该对话框后，仍能进行对其他功能的操作

QDialog
可通过QDialog::exec()的返回值：QDialog::Accepted或者QDialog::Rejected来判断用户点击的情况
===>{
QDialog dialog(this);
if (dialog.exec() == QDialog::Accepted) 
{
    // do something
} 
else 
{
    // do something else
}
}<===

===>{
QMessageBox msgBox;
msgBox.setText(tr("The document has been modified."));
msgBox.setInformativeText(tr("Do you want to save your changes?"));
msgBox.setDetailedText(tr("Differences here..."));
msgBox.setStandardButtons(QMessageBox::Save
                          | QMessageBox::Discard| QMessageBox::Cancel);
msgBox.setDefaultButton(QMessageBox::Save);
int ret = msgBox.exec();
switch (ret) 
{
case QMessageBox::Save:
    qDebug() << "Save document!";
    break;
case QMessageBox::Discard:
    qDebug() << "Discard changes!";
    break;
case QMessageBox::Cancel:
    qDebug() << "Close document!";
    break;
}
}<===


八、事件
含义：一个事件就是一个对象，所有事件的祖先都来自于 QEvent。
过程：产生事件-》发送事件-》处理事件。
捕获所发送的事件：所有的事件都传给了 QObject 对象的 event() 函数。而event()函数 根据事件类型（type值）调用不同的事件处理器函数。

两个函数：accept()->Qt 会停止事件的传播
        ignore()->意味着事件继续传播
（事件的传播是在组件层次上面的，而不是依靠类继承机制。）

处理事件的5个层面：
1、重写paintEvent()、mousePressEvent()等事件处理函数。
2、重写event()函数。event()函数是所有对象的事件入口，QObject和QWidget中的实现，默认是把事件传递给特定的事件处理函数。
3、在特定对象上面安装事件过滤器。该过滤器仅过滤该对象接收到的事件。
4、在QCoreApplication::instance()上面安装事件过滤器。该过滤器将过滤所有对象的所有事件，因此和notify()函数一样强大
但是它更灵活，因为可以安装多个过滤器。全局的事件过滤器可以看到 disabled 组件上面发出的鼠标事件。
全局过滤器有一个问题：只能用在主线程。
5、重写QCoreApplication::notify()函数。这是最强大的，和全局事件过滤器一样提供完全控制，并且不受线程的限制。
但是全局范围内只能有一个被使用（因为QCoreApplication是单例的）。
===>{
class Label : public QWidget
{
public:
    Label()
    {
        installEventFilter(this);
    }

    bool eventFilter(QObject *watched, QEvent *event)
    {
        if (watched == this) {
            if (event->type() == QEvent::MouseButtonPress) {
                qDebug() << "eventFilter";
            }
        }
        return false;
    }

protected:
    void mousePressEvent(QMouseEvent *)
    {
        qDebug() << "mousePressEvent";
    }

    bool event(QEvent *e)
    {
        if (e->type() == QEvent::MouseButtonPress) {
            qDebug() << "event";
        }
        return QWidget::event(e);
    }
};

class EventFilter : public QObject
{
public:
    EventFilter(QObject *watched, QObject *parent = 0) :
        QObject(parent),
        m_watched(watched)
    {
    }

    bool eventFilter(QObject *watched, QEvent *event)
    {
        if (watched == m_watched) {
            if (event->type() == QEvent::MouseButtonPress) {
                qDebug() << "QApplication::eventFilter";
            }
        }
        return false;
    }

private:
    QObject *m_watched;
};

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    Label label;
    app.installEventFilter(new EventFilter(&label, &label));
    label.show();
    return app.exec();
}

/*结果：
QApplication::eventFilter 
eventFilter 
event 
mousePressEvent
*/
}<===
