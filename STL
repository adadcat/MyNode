一：关于STL
标准模板库 STL（Standard Template Library）
包含六大部件：容器（Containers）分配器（Allocators）算法（Algorithm）迭代器（Iterators）适配器（Adapters）仿函数（Functors）


二、容器(Containers)
存放了各种数据结构，如：vector、list、deque、set、map等；
STL容器是一种class template。
===》{
算法：各种常用的算法，如sort、find、copy、for_each。从实现的角度来看，STL算法是一种function tempalte.
迭代器：扮演了容器与算法之间的胶合剂，共有五种类型，从实现角度来看，迭代器是一种将operator* , operator-> , operator++,operator--等指针相关操作予以重载的class template. 所有STL容器都附带有自己专属的迭代器，只有容器的设计者才知道如何遍历自己的元素。
原生指针(native pointer)也是一种迭代器。 
仿函数：行为类似函数，可作为算法的某种策略。从实现角度来看，仿函数是一种重载了operator()的class 或者class template 
适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。 
空间配置器：负责空间的配置与管理。从实现角度看，配置器是一个实现了动态空间配置、空间管理、空间释放的class tempalte.
}《===

容器分为：
1、顺序性容器：将元素按照线性排列。
vector	可变大小数组
相当于数组，可动态构建，支持随机访问，无头插和尾插，仅支持inset插入，除尾部外的元素删除比较麻烦。但使用最为广泛
deque	双端队列。
支持头插、删，尾插、删，随机访问较vector容器来说慢,但对于首尾的数据操作比较方便
list	双向循环链表。
使用起来很高效，对于任意位置的插入和删除都很快，在操作过后，以后指针、迭代器、引用都不会失效
forward_list	单向链表。
只支持单向访问，在链表的任何位置进行插入/删除操作都非常快
array	固定数组。
vector的底层即为array数组，它保存了一个以严格顺序排列的特定数量的元素

2、关联式容器：将元素以（key,value）排列，以红黑树为底层结构。
set/mutliset	集合/多重集合。
对于set，在使用insert插入元素时，已插入过的元素不可重复插入，这正好符合了集合的互异性，在插入完成显示后，会默认按照升序进行排序，对于multiset，可插入多个重复的元素
map/mutlimap	映射/多重映射。
二者均为二元关联容器（在构造时需要写两个参数类型，前者对key值，后者对应value值），因为有两个参数，因此在插入元素的时候需要配合对组pair进行插入，具体见深入详解
