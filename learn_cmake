1、cmake_minimum_required(VERSION XXX)
这里是说明cmake的版本，XXX是版本号

2、project(XXX)
指定项目名称,XXX是项目名

3、add_executable（XXX xx.cpp）
用来生成可执行文件，需要指定生成可执行文件的名称和相关源文件
但是，在使用中，我们会需要多个可执行文件，或者会将可执行文件进行名称的更改，这里就引入了set语句

4、
为了应对3中的情况，PROJECT_NAME作为可执行文件的名称
add_executable(${PROJECT_NAME} test.cpp)
如果有多个可执行文件，也可以直接放在后面，但是需要用空格进行隔开
add_executable(${PROJECT_NAME} a.cpp b.cpp c.cpp)

5、针对3、4中，后面有多个可执行文件的情况，且为了防止该执行文件名称有所改变，采用了set语句，就会使得我们的语句更加的简洁
set(SRC_LIST a.cpp b.cpp c.cpp)
add_executable(${PROJECT_NAME} ${SRC_LIST})

6、target_include_directories 为指定目标添加搜索路径
target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_BINARY_DIR} )
PROJECT_BINARY_DIR 表示当前工程的二进制路径，即编译产物会存放到该路径
此时PROJECT_BINARY_DIR 就是 build 所在路径。

7、指定c++的版本
set(CMAKE_CXX_STANDARD 11)   指定c++的版本，这里11表示指定使用C++11
set(CMAKE_CXX_STANDARD_REQUIRED True)  如果设置为 `ON`，那么 CMake 会要求编译器必须支持 `CMAKE_CXX_STANDARD` 中设置的 C++ 版本，否则会配置失败。
                                       如果设置为 `OFF`或者未设置，那么如果编译器不支持 `CMAKE_CXX_STANDARD` 中设置的 C++ 版本，CMake 会回退到编译器支持的最新版本。
