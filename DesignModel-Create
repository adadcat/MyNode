一、
创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。
结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。
行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。
其实还有两类：并发型模式和线程池模式。

二、创建型模式
1、工厂方法：定义一个用于创建对象的接口，由子类决定实例化那一个类。

//抽象产品
class Product
{
public:
  virtual void Production() = 0;
};

class ProductA : public Product
{
public:
  virtual void Production()
  {
    cout<<"production A "<<endl;
  }
};

class ProductB : public Product
{
public:
  virtual void Production()
  {
    cout<<"production B" <<endl;
  }
};

//抽象工厂
class Factory
{
public:
  virutal Product *CreateProduction() = 0;
};

class FactoryA : public Factory
{
public:
  Product *CreateProduction(){return new ProductA()};
};

class FactoryB : public Factory
{
public:
  Product *CreateProduction(){return new ProductB()};
};

int main()
{
  Factory *factory1 = new FactoryA();
  Factory *factory2 = new FactoryB();
  Product *product1 = FactoryA->CreateProduction();
  Product *product2 = FactoryB->CreateProduction();
  product1->Production();
  product2->Production();
}


2.抽象工厂模式：针对多个产品，不同的产品链
class AbstractProductA
{
public:
  virutal ~AbstractProduct();
  virtual void ProductionA() = 0;
};

class AbstractProductA1 : public AbstractProductA
{
public:
  void ProductionA() override {cout<<"AbstractProductA1"<<endl;}
};

class AbstractProductA2 : public AbstractProductA
{
public:
  void ProductionA() override {cout<<"AbstractProductA2"<<endl;}
};

class AbstractProductB
{
public:
  virutal ~AbstractProductB();
  virutal void ProductionB() = 0;
};

class AbstractProductB1 : public AbstractProductB
{
public:
  void ProductionB() override {cout<<"AbstractProductB1"<<endl;}
};

class AbstractProductB2 : public AbstractProductB
{
public:
  void ProductionB() override {cout<<"AbstractProductB2"<<endl;}
};

class AbstractFactory
{
public:
  virtual AbstractProductA *CreateProductA() = 0;
  virutal AbstractProductB *CreateProductB() = 0;
};

class AbstractFactoryA : public AbstractFactory
{
public:
  AbstractProductA *CreateProductA() override {return new AbstractProductA1();}
  AbstractProductB *CreateProductB() override {return new AbstractProductB1();}
};

class AbstractFactoryB : public AbstractFactory
{
public:
  AbstractProductA *CreatProductA() override {return new AbstractProductA2();}
  AbstractProductB *CreatProductB() override {return new AbstractProductB2();}
};

